{
  "swagger": "2.0",
  "info": {
    "description": "This is Bakergun Games backend server service users. Demo ReSTAPI on üöÄ [https://bakergun-backend-service-users.herokuapp.com](https://bakergun-backend-service-users.herokuapp.com) ",
    "version": "1.0.0",
    "title": " üì¢Ô∏è Public ReSTAPI Documentation üéÆ Bakergun Backend Service Users"
  },
  "host": "127.0.0.1:8080",
  "basePath": "/api/v1",
  "schemes": ["http"],
  "paths": {
    "/signup": {
      "post": {
        "tags": ["Sign Up"],
        "summary": "Sign Up new user",
        "description": "create user game (register)",
        "operationId": "registerUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for create user game details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success sign up or create new user."
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Login"],
        "summary": "Login User",
        "description": "login user game",
        "operationId": "loginUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for login user game details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success login"
          },
          "401": {
            "description": "authemtication failed"
          },
          "500": {
            "description": "Found error while login"
          }
        }
      }
    },
    "/user-game/{user_id}": {
      "get": {
        "tags": ["User Game"],
        "summary": "Get One User By ID",
        "description": "get one user game by id",
        "operationId": "getUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "ID of user_game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success get one user game with id={user_id}"
          },
          "403": {
            "description": "Access denied, need token "
          },
          "500": {
            "description": "Found error while get user game with id={user_id}"
          }
        }
      },
      "put": {
        "tags": ["User Game"],
        "summary": "Update User By ID",
        "description": "update user game with id as params",
        "operationId": "updateUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "ID of user_game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for update user game details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGames"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success update user game with id={user_id}"
          },
          "400": {
            "description": "can't update user with id={user_id} maybe req.body is mty"
          },
          "500": {
            "description": "Found error while update user."
          }
        }
      },
      "delete": {
        "tags": ["User Game"],
        "summary": "Delete One User By ID",
        "description": "delete user game by id",
        "operationId": "deleteUserGame",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "ID of user_game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for update user game details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGames"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success delete user by id={user_id}"
          },
          "403": {
            "description": "Access denied cause need tokens for authorization."
          },
          "500": {
            "description": "Can't delete user id={user_id}"
          }
        }
      }
    },
    "/user-game-biodata": {
      "post": {
        "tags": ["User Game Biodata"],
        "summary": "Create User Game Biodata",
        "description": "create user game biodata",
        "operationId": "createUserGameBiodata",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for create user game biodata details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGameBiodata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success create new user game biodata"
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Found error while creating user game biodata"
          }
        }
      }
    },

    "/user-game-biodata/{user_game_biodata_id}": {
      "get": {
        "tags": ["User Game Biodata"],
        "summary": "Get One User Game Biodata By ID",
        "description": "get one user game biodata by id",
        "operationId": "getOneUserGameBiodata",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "user_game_biodata_id",
            "description": "User Game Biodata ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success update user game biodata with id={user_game_biodata_id}"
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Found error while creating user game biodata with id={user_game_biodata_id}"
          }
        }
      },
      "put": {
        "tags": ["User Game Biodata"],
        "summary": "Update User Game Biodata",
        "description": "update user game biodata",
        "operationId": "updateUserGameBiodata",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "user_game_biodata_id",
            "description": "User Game Biodata ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for update user game biodata details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGameBiodata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success update user game biodata with id={user_game_biodata_id}"
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Found error while update user game biodata with id={user_game_biodata_id}"
          }
        }
      }
    },
    "/user-game-history": {
      "post": {
        "tags": ["User Game History"],
        "summary": "Create User Game History",
        "description": "create user game history",
        "operationId": "createUserGameHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for create user game history details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGameHistory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success create new user game history"
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Found error while creating user game history"
          }
        }
      }
    },
    "/user-game-history/{user_game_history_id}": {
      "get": {
        "tags": ["User Game History"],
        "summary": "Get One User Game History By ID",
        "description": "get one user game history by id",
        "operationId": "getOneUserGameHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "user_game_history_id",
            "description": "User Game History ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success get user game history with id={user_game_history_id}"
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Found error while get user game histoy with id={user_game_history_id}"
          }
        }
      },
      "put": {
        "tags": ["User Game History"],
        "summary": "Update User Game History",
        "description": "update user game history",
        "operationId": "updateUserGameHistory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "user_game_history_id",
            "description": "User Game History ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Tokens",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body use for update user game history details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserGameHistory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success update user game history with id={user_game_history_id}"
          },
          "400": {
            "description": "Access denied"
          },
          "500": {
            "description": "Found error while update user game history with id={user_game_history_id}"
          }
        }
      }
    }
  },
  "definitions": {
    "SignUp": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserGames": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserGameBiodata": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "number"
        },
        "fullname": {
          "type": "string"
        },
        "sex": {
          "type": "string"
        },
        "jobs": {
          "type": "string"
        }
      }
    },
    "UserGameHistory": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "number"
        },
        "score": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    }
  }
}
